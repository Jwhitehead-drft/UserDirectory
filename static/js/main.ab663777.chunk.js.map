{"version":3,"sources":["Components/Header.jsx","Utils/API.js","Components/EmployeeTable.jsx","Components/Wrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","axios","get","EmployeeTable","state","columns","title","field","type","data","API","then","res","setState","catch","err","console","log","style","marginTop","this","Component","Wrapper","props","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"+MAaeA,EAXA,WACd,OACC,qBAAKC,UAAU,wDAAf,SACC,sBAAKA,UAAU,YAAf,UACC,oBAAIA,UAAU,YAAd,gCACA,mBAAGA,UAAU,OAAb,uD,sDCLW,EACG,kBAAMC,IAAMC,IAAI,sD,kBC8BnBC,E,4MA3BXC,MAAQ,CACJC,QAAS,CACL,CAAEC,MAAO,KAAMC,MAAO,MACtB,CAAED,MAAO,WAAYC,MAAO,iBAC5B,CAAED,MAAO,MAAOC,MAAO,gBACvB,CAAED,MAAO,SAAUC,MAAO,kBAAmBC,KAAM,YAEvDC,KAAM,I,uDAGV,WAAqB,IAAD,OAChBC,IACKC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAACJ,KAAMG,EAAIH,KAAKA,UAC1CK,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,oBAGlC,WACI,OACI,cAAC,IAAD,CAAeG,MAAO,CAACC,UAAW,IAC9Bb,MAAM,qBACND,QAASe,KAAKhB,MAAMC,QACpBI,KAAMW,KAAKhB,MAAMK,W,GAtBLY,aCGbC,EARC,SAACC,GAChB,OACC,qBAAKvB,UAAU,UAAf,SACEuB,EAAMC,YCeKC,MAXf,WACQ,OACI,eAAC,EAAD,WACI,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,QCAIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ab663777.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<div className=\"jumbotron jumbotron-fluid text-center bg-notification\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<h1 className=\"display-4\">Employee Directory</h1>\r\n\t\t\t\t<p className=\"lead\">This is my first react application.</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Header;","import axios from 'axios';\r\n\r\nexport default {\r\n    getEmployees: () => axios.get(\"https://dummy.restapiexample.com/api/v1/employees\")\r\n};","import React, { Component } from \"react\";\r\nimport API from \"../Utils/API\";\r\nimport MaterialTable from 'material-table';\r\n\r\n\r\nclass EmployeeTable extends Component {\r\n    state = {\r\n        columns: [\r\n            { title: 'ID', field: 'id' },\r\n            { title: 'Employee', field: 'employee_name' },\r\n            { title: 'Age', field: 'employee_age' },\r\n            { title: 'Salary', field: 'employee_salary', type: 'numeric' }\r\n        ],\r\n        data: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then(res => this.setState({data: res.data.data}))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <MaterialTable style={{marginTop: 25}}\r\n                title=\"Employee Directory\"\r\n                columns={this.state.columns}\r\n                data={this.state.data}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmployeeTable;","const Wrapper = (props) => {\r\n\treturn (\r\n\t\t<div className=\"wrapper\">\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header';\r\nimport EmployeeTable from './Components/EmployeeTable';\r\nimport Wrapper from \"./Components/Wrapper\";\r\n\r\n\r\nfunction App () {\r\n        return (\r\n            <Wrapper>\r\n                <Header />\r\n                <br />\r\n                <EmployeeTable />\r\n            </Wrapper>\r\n        );\r\n    }\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}